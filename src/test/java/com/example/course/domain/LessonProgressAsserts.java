package com.example.course.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LessonProgressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonProgressAllPropertiesEquals(LessonProgress expected, LessonProgress actual) {
        assertLessonProgressAutoGeneratedPropertiesEquals(expected, actual);
        assertLessonProgressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonProgressAllUpdatablePropertiesEquals(LessonProgress expected, LessonProgress actual) {
        assertLessonProgressUpdatableFieldsEquals(expected, actual);
        assertLessonProgressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonProgressAutoGeneratedPropertiesEquals(LessonProgress expected, LessonProgress actual) {
        assertThat(actual)
            .as("Verify LessonProgress auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonProgressUpdatableFieldsEquals(LessonProgress expected, LessonProgress actual) {
        assertThat(actual)
            .as("Verify LessonProgress relevant properties")
            .satisfies(a -> assertThat(a.getViewed()).as("check viewed").isEqualTo(expected.getViewed()))
            .satisfies(a -> assertThat(a.getViewedDate()).as("check viewedDate").isEqualTo(expected.getViewedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonProgressUpdatableRelationshipsEquals(LessonProgress expected, LessonProgress actual) {
        assertThat(actual)
            .as("Verify LessonProgress relationships")
            .satisfies(a -> assertThat(a.getCourseItem()).as("check courseItem").isEqualTo(expected.getCourseItem()));
    }
}
