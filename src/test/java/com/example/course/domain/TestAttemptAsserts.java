package com.example.course.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TestAttemptAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestAttemptAllPropertiesEquals(TestAttempt expected, TestAttempt actual) {
        assertTestAttemptAutoGeneratedPropertiesEquals(expected, actual);
        assertTestAttemptAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestAttemptAllUpdatablePropertiesEquals(TestAttempt expected, TestAttempt actual) {
        assertTestAttemptUpdatableFieldsEquals(expected, actual);
        assertTestAttemptUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestAttemptAutoGeneratedPropertiesEquals(TestAttempt expected, TestAttempt actual) {
        assertThat(actual)
            .as("Verify TestAttempt auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestAttemptUpdatableFieldsEquals(TestAttempt expected, TestAttempt actual) {
        assertThat(actual)
            .as("Verify TestAttempt relevant properties")
            .satisfies(a -> assertThat(a.getScore()).as("check score").isEqualTo(expected.getScore()))
            .satisfies(a -> assertThat(a.getPassed()).as("check passed").isEqualTo(expected.getPassed()))
            .satisfies(a -> assertThat(a.getAttemptDate()).as("check attemptDate").isEqualTo(expected.getAttemptDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTestAttemptUpdatableRelationshipsEquals(TestAttempt expected, TestAttempt actual) {
        assertThat(actual)
            .as("Verify TestAttempt relationships")
            .satisfies(a -> assertThat(a.getCourseItem()).as("check courseItem").isEqualTo(expected.getCourseItem()));
    }
}
